//G00320698 - Rebecca Kane
package ie.gmit.sw;

import java.io.*;
import java.net.*;
import java.util.*;

// to avoid confusion in the project spec pdf...

public class Client {

static Scanner console = new Scanner(System.in);
	
	public static void main(String[] args) throws Throwable{
		
		int choice = 0;
		
		System.out.println("1: Connect to Server");
		System.out.println("2: Print File Listing");
		System.out.println("3: Download File");
		System.out.println("4: Quit");
		choice = console.nextInt();
		
		while(choice != 4){
			
			if(choice == 1){
				
			}
			else if(choice == 2){
				
			}
			else if(choice == 3){
				downloadFile();
			}
			else if(choice == 4){
				
			}
			else{ // just in case user tries an invalid option
				System.out.println("Please enter a valid option...");
				choice = console.nextInt();
			}
		}// end while
		
		new Thread(new Runnable(){
			
			public void run() { 
				try {
					// Connect to server - 7777 specified in project spec
					Socket s = new Socket("localhost", 7777);
					
					
				} catch (Exception e) { // Catch errors and display
					System.out.println("Error: " + e.getMessage());
				}//End of try /catch
			}// End of run()
			
		}, "Client: ").start(); //Start the thread
		
	} // end main
	
	
	// Code adapted from -
	// http://codereview.stackexchange.com/questions/20961/java-multi-thread-file-server-and-client
	public void downloadFile() {
        try {
            int bytesRead;

            DataInputStream clientData = new DataInputStream(clientSocket.getInputStream());

            String fileName = clientData.readUTF();
            OutputStream output = new FileOutputStream(("received_from_client_" + fileName));
            long size = clientData.readLong();
            byte[] buffer = new byte[1024];
            while (size > 0 && (bytesRead = clientData.read(buffer, 0, (int) Math.min(buffer.length, size))) != -1) {
                output.write(buffer, 0, bytesRead);
                size -= bytesRead;
            }

            output.close();
            clientData.close();

            System.out.println("File "+fileName+" received from client.");
        } catch (IOException ex) {
            System.err.println("Client error. Connection closed.");
        }
    }

	
} // end Client
